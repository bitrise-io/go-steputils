// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package compression

import (
	"sync"
)

// Ensure, that ArchiveDependencyCheckerMock does implement ArchiveDependencyChecker.
// If this is not the case, regenerate this file with moq.
var _ ArchiveDependencyChecker = &ArchiveDependencyCheckerMock{}

// ArchiveDependencyCheckerMock is a mock implementation of ArchiveDependencyChecker.
//
//	func TestSomethingThatUsesArchiveDependencyChecker(t *testing.T) {
//
//		// make and configure a mocked ArchiveDependencyChecker
//		mockedArchiveDependencyChecker := &ArchiveDependencyCheckerMock{
//			CheckZstdFunc: func() bool {
//				panic("mock out the CheckZstd method")
//			},
//		}
//
//		// use mockedArchiveDependencyChecker in code that requires ArchiveDependencyChecker
//		// and then make assertions.
//
//	}
type ArchiveDependencyCheckerMock struct {
	// CheckZstdFunc mocks the CheckZstd method.
	CheckZstdFunc func() bool

	// calls tracks calls to the methods.
	calls struct {
		// CheckZstd holds details about calls to the CheckZstd method.
		CheckZstd []struct {
		}
	}
	lockCheckZstd sync.RWMutex
}

// CheckZstd calls CheckZstdFunc.
func (mock *ArchiveDependencyCheckerMock) CheckZstd() bool {
	callInfo := struct {
	}{}
	mock.lockCheckZstd.Lock()
	mock.calls.CheckZstd = append(mock.calls.CheckZstd, callInfo)
	mock.lockCheckZstd.Unlock()
	if mock.CheckZstdFunc == nil {
		var (
			bOut bool
		)
		return bOut
	}
	return mock.CheckZstdFunc()
}

// CheckZstdCalls gets all the calls that were made to CheckZstd.
// Check the length with:
//
//	len(mockedArchiveDependencyChecker.CheckZstdCalls())
func (mock *ArchiveDependencyCheckerMock) CheckZstdCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCheckZstd.RLock()
	calls = mock.calls.CheckZstd
	mock.lockCheckZstd.RUnlock()
	return calls
}
