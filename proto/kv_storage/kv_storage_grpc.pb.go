// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kv_storage/kv_storage.proto

package kv_storage

import (
	context "context"
	bytestream "google.golang.org/genproto/googleapis/bytestream"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KVStorage_Get_FullMethodName    = "/kv_storage.KVStorage/Get"
	KVStorage_Put_FullMethodName    = "/kv_storage.KVStorage/Put"
	KVStorage_Delete_FullMethodName = "/kv_storage.KVStorage/Delete"
)

// KVStorageClient is the client API for KVStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVStorageClient interface {
	Get(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (KVStorage_GetClient, error)
	Put(ctx context.Context, opts ...grpc.CallOption) (KVStorage_PutClient, error)
	Delete(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type kVStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewKVStorageClient(cc grpc.ClientConnInterface) KVStorageClient {
	return &kVStorageClient{cc}
}

func (c *kVStorageClient) Get(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (KVStorage_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &KVStorage_ServiceDesc.Streams[0], KVStorage_Get_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kVStorageGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KVStorage_GetClient interface {
	Recv() (*bytestream.ReadResponse, error)
	grpc.ClientStream
}

type kVStorageGetClient struct {
	grpc.ClientStream
}

func (x *kVStorageGetClient) Recv() (*bytestream.ReadResponse, error) {
	m := new(bytestream.ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kVStorageClient) Put(ctx context.Context, opts ...grpc.CallOption) (KVStorage_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &KVStorage_ServiceDesc.Streams[1], KVStorage_Put_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kVStoragePutClient{stream}
	return x, nil
}

type KVStorage_PutClient interface {
	Send(*bytestream.WriteRequest) error
	CloseAndRecv() (*bytestream.WriteResponse, error)
	grpc.ClientStream
}

type kVStoragePutClient struct {
	grpc.ClientStream
}

func (x *kVStoragePutClient) Send(m *bytestream.WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kVStoragePutClient) CloseAndRecv() (*bytestream.WriteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(bytestream.WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kVStorageClient) Delete(ctx context.Context, in *bytestream.ReadRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, KVStorage_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVStorageServer is the server API for KVStorage service.
// All implementations must embed UnimplementedKVStorageServer
// for forward compatibility
type KVStorageServer interface {
	Get(*bytestream.ReadRequest, KVStorage_GetServer) error
	Put(KVStorage_PutServer) error
	Delete(context.Context, *bytestream.ReadRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedKVStorageServer()
}

// UnimplementedKVStorageServer must be embedded to have forward compatible implementations.
type UnimplementedKVStorageServer struct {
}

func (UnimplementedKVStorageServer) Get(*bytestream.ReadRequest, KVStorage_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKVStorageServer) Put(KVStorage_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedKVStorageServer) Delete(context.Context, *bytestream.ReadRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKVStorageServer) mustEmbedUnimplementedKVStorageServer() {}

// UnsafeKVStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVStorageServer will
// result in compilation errors.
type UnsafeKVStorageServer interface {
	mustEmbedUnimplementedKVStorageServer()
}

func RegisterKVStorageServer(s grpc.ServiceRegistrar, srv KVStorageServer) {
	s.RegisterService(&KVStorage_ServiceDesc, srv)
}

func _KVStorage_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bytestream.ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KVStorageServer).Get(m, &kVStorageGetServer{stream})
}

type KVStorage_GetServer interface {
	Send(*bytestream.ReadResponse) error
	grpc.ServerStream
}

type kVStorageGetServer struct {
	grpc.ServerStream
}

func (x *kVStorageGetServer) Send(m *bytestream.ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KVStorage_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KVStorageServer).Put(&kVStoragePutServer{stream})
}

type KVStorage_PutServer interface {
	SendAndClose(*bytestream.WriteResponse) error
	Recv() (*bytestream.WriteRequest, error)
	grpc.ServerStream
}

type kVStoragePutServer struct {
	grpc.ServerStream
}

func (x *kVStoragePutServer) SendAndClose(m *bytestream.WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kVStoragePutServer) Recv() (*bytestream.WriteRequest, error) {
	m := new(bytestream.WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KVStorage_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bytestream.ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStorageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVStorage_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStorageServer).Delete(ctx, req.(*bytestream.ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KVStorage_ServiceDesc is the grpc.ServiceDesc for KVStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv_storage.KVStorage",
	HandlerType: (*KVStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _KVStorage_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _KVStorage_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Put",
			Handler:       _KVStorage_Put_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "kv_storage/kv_storage.proto",
}
